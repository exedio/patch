/*
 * Copyright (C) 2004-2013  exedio GmbH (www.exedio.com)
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

package com.exedio.cope.patch;

import static com.exedio.cope.SchemaInfo.getColumnName;
import static com.exedio.cope.SchemaInfo.getPrimaryKeyColumnName;
import static com.exedio.cope.SchemaInfo.getTableName;

import com.exedio.cope.CopeCacheWeight;
import com.exedio.cope.Item;
import com.exedio.cope.SchemaInfo;
import com.exedio.cope.StringField;
import java.util.concurrent.atomic.AtomicInteger;

@CopeCacheWeight(0)
final class SchemaSampleItem extends Item
{
	private static final AtomicInteger thisSource = new AtomicInteger();

	/**
	 * @cope.get package
	 */
	private static final StringField content = new StringField().toFinal();

	static String create(final String contentValue)
	{
		return
				"INSERT INTO " + q(getTableName(TYPE)) +
				" ( " + q(getPrimaryKeyColumnName(TYPE)) + ", " + q(getColumnName(content)) + " ) " +
				"VALUES" +
				" ( " + thisSource.getAndIncrement() + ", '" + contentValue + "' )";
	}

	private static final String q(final String name)
	{
		return SchemaInfo.quoteName(TYPE.getModel(), name);
	}


	/**

	 **
	 * Creates a new SchemaSampleItem with all the fields initially needed.
	 * @param content the initial value for field {@link #content}.
	 * @throws com.exedio.cope.MandatoryViolationException if content is null.
	 * @throws com.exedio.cope.StringLengthViolationException if content violates its length constraint.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tags <tt>@cope.constructor public|package|protected|private|none</tt> in the class comment and <tt>@cope.initial</tt> in the comment of fields.
	 */
	private SchemaSampleItem(
				final java.lang.String content)
			throws
				com.exedio.cope.MandatoryViolationException,
				com.exedio.cope.StringLengthViolationException
	{
		this(new com.exedio.cope.SetValue<?>[]{
			SchemaSampleItem.content.map(content),
		});
	}/**

	 **
	 * Creates a new SchemaSampleItem and sets the given fields initially.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.generic.constructor public|package|protected|private|none</tt> in the class comment.
	 */
	private SchemaSampleItem(final com.exedio.cope.SetValue<?>... setValues)
	{
		super(setValues);
	}/**

	 **
	 * Returns the value of {@link #content}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.get public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.lang.String getContent()
	{
		return SchemaSampleItem.content.get(this);
	}/**

	 **
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 */
	private static final long serialVersionUID = 1l;/**

	 **
	 * The persistent type information for schemaSampleItem.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.type public|package|protected|private|none</tt> in the class comment.
	 */
	static final com.exedio.cope.Type<SchemaSampleItem> TYPE = com.exedio.cope.TypesBound.newType(SchemaSampleItem.class);/**

	 **
	 * Activation constructor. Used for internal purposes only.
	 * @see com.exedio.cope.Item#Item(com.exedio.cope.ActivationParameters)
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 */
	@SuppressWarnings("unused") private SchemaSampleItem(final com.exedio.cope.ActivationParameters ap){super(ap);
}}
